--- n/code/lib/list.cc	2002-12-16 18:57:00.000000000 +0800
+++ NachOS-4.0/code/lib/list.cc	2008-09-17 15:06:47.000000000 +0800
@@ -237,25 +237,25 @@
     ListElement<T> *ptr;		// keep track
 
     ASSERT(!IsInList(item));
-    if (IsEmpty()) {			// if list is empty, put at front
-        first = element;
-        last = element;
-    } else if (compare(item, first->item) < 0) {  // item goes at front 
-	element->next = first;
-	first = element;
+    if (this->IsEmpty()) {			// if list is empty, put at front
+        this->first = element;
+        this->last = element;
+    } else if (compare(item, this->first->item) < 0) {  // item goes at front 
+	element->next = this->first;
+	this->first = element;
     } else {		// look for first elt in list bigger than item
-        for (ptr = first; ptr->next != NULL; ptr = ptr->next) {
+        for (ptr = this->first; ptr->next != NULL; ptr = ptr->next) {
             if (compare(item, ptr->next->item) < 0) {
 		element->next = ptr->next;
 	        ptr->next = element;
-		numInList++;
+		this->numInList++;
 		return;
 	    }
 	}
-	last->next = element;		// item goes at end of list
-	last = element;
+	this->last->next = element;		// item goes at end of list
+	this->last = element;
     }
-    numInList++;
+    this->numInList++;
     ASSERT(IsInList(item));
 }
 
@@ -338,8 +338,8 @@
     ListElement<T> *prev, *ptr;
 
     List<T>::SanityCheck();
-    if (first != last) {
-        for (prev = first, ptr = first->next; ptr != NULL; 
+    if (this->first != this->last) {
+        for (prev = this->first, ptr = this->first->next; ptr != NULL; 
 						prev = ptr, ptr = ptr->next) {
             ASSERT(compare(prev->item, ptr->item) <= 0);
         }
@@ -368,10 +368,10 @@
 
      // should be able to get out everything we put in
      for (i = 0; i < numEntries; i++) {
-	 q[i] = RemoveFront();
+	 q[i] = this->RemoveFront();
          ASSERT(!IsInList(q[i]));
      }
-     ASSERT(IsEmpty());
+     ASSERT(this->IsEmpty());
 
      // make sure everything came out in the right order
      for (i = 0; i < (numEntries - 1); i++) {
